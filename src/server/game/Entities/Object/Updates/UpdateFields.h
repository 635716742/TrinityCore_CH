/*
 * This file is part of the TrinityCore Project. See AUTHORS file for Copyright information
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UpdateFields_h__
#define UpdateFields_h__

#include "EnumFlag.h"
#include "MythicPlusPacketsCommon.h"
#include "ObjectGuid.h"
#include "Position.h"
#include "QuaternionData.h"
#include "UpdateField.h"
#include "UpdateMask.h"

// This file is automatically generated, DO NOT EDIT

class AreaTrigger;
class AzeriteEmpoweredItem;
class AzeriteItem;
class Bag;
class ByteBuffer;
class Conversation;
class Corpse;
class DynamicObject;
class GameObject;
class Item;
class Object;
class Player;
class Unit;

namespace UF
{
struct ObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> EntryID;
    struct EntryIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 2> DynamicFlags;
    struct DynamicFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<float, 0, 3> Scale;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemEnchantment : public IsUpdateFieldStructureTag, public HasChangesMask<6>
{
    UpdateField<int32, 0, 1> ID;
    UpdateField<uint32, 0, 2> Duration;
    UpdateField<int16, 0, 3> Charges;
    UpdateField<uint8, 0, 4> Unk254;
    UpdateField<uint8, 0, 5> Unk254_2;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemMod : public IsUpdateFieldStructureTag
{
    int32 Value;
    uint8 Type;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ItemMod const& right) const;
    bool operator!=(ItemMod const& right) const { return !(*this == right); }
};

struct ItemModList : public IsUpdateFieldStructureTag, public HasChangesMask<1>
{
    DynamicUpdateField<UF::ItemMod, 0, 0> Values;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArtifactPower : public IsUpdateFieldStructureTag
{
    int16 ArtifactPowerID;
    uint8 PurchasedRank;
    uint8 CurrentRankWithBonus;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    bool operator==(ArtifactPower const& right) const;
    bool operator!=(ArtifactPower const& right) const { return !(*this == right); }
};

struct SocketedGem : public IsUpdateFieldStructureTag, public HasChangesMask<20>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint8, 0, 2> Context;
    UpdateFieldArray<uint16, 16, 3, 4> BonusListIDs;

    void WriteCreate(ByteBuffer& data, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Item const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ItemData : public IsUpdateFieldStructureTag, public HasChangesMask<43>
{
    UpdateField<std::vector<int32>, 0, 1> BonusListIDs;
    DynamicUpdateField<UF::ArtifactPower, 0, 2> ArtifactPowers;
    DynamicUpdateField<UF::SocketedGem, 0, 3> Gems;
    UpdateField<ObjectGuid, 0, 4> Owner;
    UpdateField<ObjectGuid, 0, 5> ContainedIn;
    UpdateField<ObjectGuid, 0, 6> Creator;
    UpdateField<ObjectGuid, 0, 7> GiftCreator;
    UpdateField<uint32, 0, 8> StackCount;
    UpdateField<uint32, 0, 9> Expiration;
    UpdateField<uint32, 0, 10> DynamicFlags;
    UpdateField<int32, 0, 11> PropertySeed;
    UpdateField<int32, 0, 12> RandomPropertiesID;
    UpdateField<uint32, 0, 13> Durability;
    UpdateField<uint32, 0, 14> MaxDurability;
    UpdateField<uint32, 0, 15> CreatePlayedTime;
    UpdateField<int32, 0, 16> Context;
    UpdateField<int64, 0, 17> CreateTime;
    UpdateField<uint64, 0, 18> ArtifactXP;
    UpdateField<uint8, 0, 19> ItemAppearanceModID;
    UpdateField<UF::ItemModList, 0, 20> Modifiers;
    UpdateField<uint32, 0, 21> DynamicFlags2;
    UpdateField<uint16, 0, 22> DEBUGItemLevel;
    UpdateFieldArray<int32, 5, 23, 24> SpellCharges;
    UpdateFieldArray<UF::ItemEnchantment, 13, 29, 30> Enchantment;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Item const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Item const* owner, Player const* receiver) const;
    void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags) const;
    void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags) const;
    void ClearChangesMask();
};

struct ContainerData : public IsUpdateFieldStructureTag, public HasChangesMask<39>
{
    UpdateField<uint32, 0, 1> NumSlots;
    UpdateFieldArray<ObjectGuid, 36, 2, 3> Slots;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Bag const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Bag const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct UnitChannel : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 SpellXSpellVisualID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(UnitChannel const& right) const;
    bool operator!=(UnitChannel const& right) const { return !(*this == right); }
};

struct VisibleItem : public IsUpdateFieldStructureTag, public HasChangesMask<4>
{
    UpdateField<int32, 0, 1> ItemID;
    UpdateField<uint16, 0, 2> ItemAppearanceModID;
    UpdateField<uint16, 0, 3> ItemVisual;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PassiveSpellHistory : public IsUpdateFieldStructureTag
{
    int32 SpellID;
    int32 AuraSpellID;

    void WriteCreate(ByteBuffer& data, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Unit const* owner, Player const* receiver) const;
    bool operator==(PassiveSpellHistory const& right) const;
    bool operator!=(PassiveSpellHistory const& right) const { return !(*this == right); }
};

struct UnitData : public IsUpdateFieldStructureTag, public HasChangesMask<207>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<UF::PassiveSpellHistory, 0, 2> PassiveSpells;
    DynamicUpdateField<int32, 0, 3> WorldEffects;
    DynamicUpdateField<ObjectGuid, 0, 4> ChannelObjects;
    UpdateField<int64, 0, 5> Health;
    UpdateField<int64, 0, 6> MaxHealth;
    UpdateField<int32, 0, 7> DisplayID;
    struct DisplayIDTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 8> StateSpellVisualID;
    UpdateField<uint32, 0, 9> StateAnimID;
    UpdateField<uint32, 0, 10> StateAnimKitID;
    UpdateField<ObjectGuid, 0, 11> Charm;
    UpdateField<ObjectGuid, 0, 12> Summon;
    UpdateField<ObjectGuid, 0, 13> Critter;
    UpdateField<ObjectGuid, 0, 14> CharmedBy;
    UpdateField<ObjectGuid, 0, 15> SummonedBy;
    UpdateField<ObjectGuid, 0, 16> CreatedBy;
    UpdateField<ObjectGuid, 0, 17> DemonCreator;
    UpdateField<ObjectGuid, 0, 18> LookAtControllerTarget;
    UpdateField<ObjectGuid, 0, 19> Target;
    UpdateField<ObjectGuid, 0, 20> BattlePetCompanionGUID;
    UpdateField<uint64, 0, 21> BattlePetDBID;
    UpdateField<UF::UnitChannel, 0, 22> ChannelData;
    UpdateField<uint32, 0, 23> SummonedByHomeRealm;
    UpdateField<uint8, 0, 24> Race;
    UpdateField<uint8, 0, 25> ClassId;
    UpdateField<uint8, 0, 26> PlayerClassId;
    UpdateField<uint8, 0, 27> Sex;
    UpdateField<uint8, 0, 28> DisplayPower;
    UpdateField<uint32, 0, 29> OverrideDisplayPowerID;
    UpdateField<int32, 0, 30> Level;
    UpdateField<int32, 0, 31> EffectiveLevel;
    UpdateField<int32, 32, 33> ContentTuningID;
    UpdateField<int32, 32, 34> ScalingLevelMin;
    UpdateField<int32, 32, 35> ScalingLevelMax;
    UpdateField<int32, 32, 36> ScalingLevelDelta;
    UpdateField<int32, 32, 37> ScalingFactionGroup;
    UpdateField<int32, 32, 38> ScalingHealthItemLevelCurveID;
    UpdateField<int32, 32, 39> ScalingDamageItemLevelCurveID;
    UpdateField<int32, 32, 40> FactionTemplate;
    struct FactionTemplateTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 32, 41> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 42> Flags2;
    UpdateField<uint32, 32, 43> Flags3;
    UpdateField<uint32, 32, 44> AuraState;
    struct AuraStateTag : ViewerDependentValueTag<uint32> {};
    UpdateField<uint32, 32, 45> RangedAttackRoundBaseTime;
    UpdateField<float, 32, 46> BoundingRadius;
    UpdateField<float, 32, 47> CombatReach;
    UpdateField<float, 32, 48> DisplayScale;
    UpdateField<int32, 32, 49> NativeDisplayID;
    UpdateField<float, 32, 50> NativeXDisplayScale;
    UpdateField<int32, 32, 51> MountDisplayID;
    UpdateField<float, 32, 52> MinDamage;
    UpdateField<float, 32, 53> MaxDamage;
    UpdateField<float, 32, 54> MinOffHandDamage;
    UpdateField<float, 32, 55> MaxOffHandDamage;
    UpdateField<uint8, 32, 56> StandState;
    UpdateField<uint8, 32, 57> PetTalentPoints;
    UpdateField<uint8, 32, 58> VisFlags;
    UpdateField<uint8, 32, 59> AnimTier;
    UpdateField<uint32, 32, 60> PetNumber;
    UpdateField<uint32, 32, 61> PetNameTimestamp;
    UpdateField<uint32, 32, 62> PetExperience;
    UpdateField<uint32, 32, 63> PetNextLevelExperience;
    UpdateField<float, 64, 65> ModCastingSpeed;
    UpdateField<float, 64, 66> ModSpellHaste;
    UpdateField<float, 64, 67> ModHaste;
    UpdateField<float, 64, 68> ModRangedHaste;
    UpdateField<float, 64, 69> ModHasteRegen;
    UpdateField<float, 64, 70> ModTimeRate;
    UpdateField<int32, 64, 71> CreatedBySpell;
    UpdateField<int32, 64, 72> EmoteState;
    UpdateField<uint16, 64, 73> TrainingPointsUsed;
    UpdateField<uint16, 64, 74> TrainingPointsTotal;
    UpdateField<int32, 64, 75> BaseMana;
    UpdateField<int32, 64, 76> BaseHealth;
    UpdateField<uint8, 64, 77> SheatheState;
    UpdateField<uint8, 64, 78> PvpFlags;
    struct PvpFlagsTag : ViewerDependentValueTag<uint8> {};
    UpdateField<uint8, 64, 79> PetFlags;
    UpdateField<uint8, 64, 80> ShapeshiftForm;
    UpdateField<int32, 64, 81> AttackPower;
    UpdateField<int32, 64, 82> AttackPowerModPos;
    UpdateField<int32, 64, 83> AttackPowerModNeg;
    UpdateField<float, 64, 84> AttackPowerMultiplier;
    UpdateField<int32, 64, 85> RangedAttackPower;
    UpdateField<int32, 64, 86> RangedAttackPowerModPos;
    UpdateField<int32, 64, 87> RangedAttackPowerModNeg;
    UpdateField<float, 64, 88> RangedAttackPowerMultiplier;
    UpdateField<int32, 64, 89> SetAttackSpeedAura;
    UpdateField<float, 64, 90> Lifesteal;
    UpdateField<float, 64, 91> MinRangedDamage;
    UpdateField<float, 64, 92> MaxRangedDamage;
    UpdateField<float, 64, 93> MaxHealthModifier;
    UpdateField<float, 64, 94> HoverHeight;
    UpdateField<int32, 64, 95> MinItemLevelCutoff;
    UpdateField<int32, 96, 97> MinItemLevel;
    UpdateField<int32, 96, 98> MaxItemLevel;
    UpdateField<int32, 96, 99> WildBattlePetLevel;
    UpdateField<uint32, 96, 100> BattlePetCompanionNameTimestamp;
    UpdateField<int32, 96, 101> InteractSpellID;
    UpdateField<int32, 96, 102> ScaleDuration;
    UpdateField<int32, 96, 103> LooksLikeMountID;
    UpdateField<int32, 96, 104> LooksLikeCreatureID;
    UpdateField<int32, 96, 105> LookAtControllerID;
    UpdateField<ObjectGuid, 96, 106> GuildGUID;
    UpdateField<ObjectGuid, 96, 107> SkinningOwnerGUID;
    UpdateField<ObjectGuid, 96, 108> Unk340_3;
    UpdateFieldArray<uint32, 2, 109, 110> NpcFlags;
    struct NpcFlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateFieldArray<float, 7, 112, 113> Unk340;
    UpdateFieldArray<float, 7, 112, 120> Unk340_2;
    UpdateFieldArray<int32, 7, 112, 127> Power;
    UpdateFieldArray<int32, 7, 112, 134> MaxPower;
    UpdateFieldArray<float, 7, 112, 141> PowerRegenFlatModifier;
    UpdateFieldArray<UF::VisibleItem, 3, 148, 149> VirtualItems;
    UpdateFieldArray<uint32, 2, 152, 153> AttackRoundBaseTime;
    UpdateFieldArray<int32, 5, 155, 156> Stats;
    UpdateFieldArray<int32, 5, 155, 161> StatPosBuff;
    UpdateFieldArray<int32, 5, 155, 166> StatNegBuff;
    UpdateFieldArray<int32, 7, 171, 172> Resistances;
    UpdateFieldArray<int32, 7, 171, 179> PowerCostModifier;
    UpdateFieldArray<float, 7, 171, 186> PowerCostMultiplier;
    UpdateFieldArray<int32, 7, 171, 193> ResistanceBuffModsPositive;
    UpdateFieldArray<int32, 7, 171, 200> ResistanceBuffModsNegative;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Unit const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Unit const* owner, Player const* receiver) const;
    void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags) const;
    void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags) const;
    void ClearChangesMask();
};

struct ChrCustomizationChoice : public IsUpdateFieldStructureTag
{
    uint32 ChrCustomizationOptionID;
    uint32 ChrCustomizationChoiceID;

    void WriteCreate(ByteBuffer& data, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Object const* owner, Player const* receiver) const;
    bool operator==(ChrCustomizationChoice const& right) const;
    bool operator!=(ChrCustomizationChoice const& right) const { return !(*this == right); }
};

struct QuestLog : public IsUpdateFieldStructureTag, public HasChangesMask<30>
{
    UpdateField<int32, 0, 1> QuestID;
    UpdateField<uint32, 0, 2> StateFlags;
    UpdateField<uint32, 0, 3> EndTime;
    UpdateField<uint32, 0, 4> AcceptTime;
    UpdateFieldArray<uint16, 24, 5, 6> ObjectiveProgress;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ArenaCooldown : public IsUpdateFieldStructureTag, public HasChangesMask<9>
{
    UpdateField<int32, 0, 1> SpellID;
    UpdateField<int32, 0, 2> Charges;
    UpdateField<int32, 0, 3> Unk254;
    UpdateField<uint32, 0, 4> Flags;
    UpdateField<uint32, 0, 5> StartTime;
    UpdateField<uint32, 0, 6> EndTime;
    UpdateField<uint32, 0, 7> NextChargeTime;
    UpdateField<uint8, 0, 8> MaxCharges;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<80>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    DynamicUpdateField<UF::ArenaCooldown, 0, 2> ArenaCooldowns;
    UpdateField<ObjectGuid, 0, 3> DuelArbiter;
    UpdateField<ObjectGuid, 0, 4> WowAccount;
    UpdateField<ObjectGuid, 0, 5> LootTargetGUID;
    UpdateField<uint32, 0, 6> PlayerFlags;
    UpdateField<uint32, 0, 7> PlayerFlagsEx;
    UpdateField<uint32, 0, 8> GuildRankID;
    UpdateField<uint32, 0, 9> GuildDeleteDate;
    UpdateField<int32, 0, 10> GuildLevel;
    UpdateField<uint8, 0, 11> PartyType;
    UpdateField<uint8, 0, 12> NativeSex;
    UpdateField<uint8, 0, 13> Inebriation;
    UpdateField<uint8, 0, 14> PvpTitle;
    UpdateField<uint8, 0, 15> ArenaFaction;
    UpdateField<uint8, 0, 16> PvpRank;
    UpdateField<uint8, 0, 17> Unk254;
    UpdateField<uint32, 0, 18> DuelTeam;
    UpdateField<int32, 0, 19> GuildTimeStamp;
    UpdateField<int32, 0, 20> PlayerTitle;
    UpdateField<int32, 0, 21> FakeInebriation;
    UpdateField<uint32, 0, 22> VirtualPlayerRealm;
    UpdateField<uint32, 0, 23> CurrentSpecID;
    UpdateField<int32, 0, 24> TaxiMountAnimKitID;
    UpdateField<uint8, 0, 25> CurrentBattlePetBreedQuality;
    UpdateField<int32, 0, 26> HonorLevel;
    UpdateFieldArray<UF::QuestLog, 25, 27, 28> QuestLog;
    UpdateFieldArray<UF::VisibleItem, 19, 53, 54> VisibleItems;
    UpdateFieldArray<float, 6, 73, 74> AvgItemLevel;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    void AppendAllowedFieldsMaskForFlag(Mask& allowedMaskForTarget, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags) const;
    void FilterDisallowedFieldsMaskForFlag(Mask& changesMask, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags) const;
    void ClearChangesMask();
};

struct SkillInfo : public IsUpdateFieldStructureTag, public HasChangesMask<1793>
{
    UpdateFieldArray<uint16, 256, 0, 1> SkillLineID;
    UpdateFieldArray<uint16, 256, 0, 257> SkillStep;
    UpdateFieldArray<uint16, 256, 0, 513> SkillRank;
    UpdateFieldArray<uint16, 256, 0, 769> SkillStartingRank;
    UpdateFieldArray<uint16, 256, 0, 1025> SkillMaxRank;
    UpdateFieldArray<int16, 256, 0, 1281> SkillTempBonus;
    UpdateFieldArray<uint16, 256, 0, 1537> SkillPermBonus;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct RestInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<uint32, 0, 1> Threshold;
    UpdateField<uint8, 0, 2> StateID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct PVPInfo : public IsUpdateFieldStructureTag, public HasChangesMask<13>
{
    UpdateField<bool, 0, 1> Disqualified;
    UpdateField<uint32, 0, 2> WeeklyPlayed;
    UpdateField<uint32, 0, 3> WeeklyWon;
    UpdateField<uint32, 0, 4> SeasonPlayed;
    UpdateField<uint32, 0, 5> SeasonWon;
    UpdateField<uint32, 0, 6> Rating;
    UpdateField<uint32, 0, 7> WeeklyBestRating;
    UpdateField<uint32, 0, 8> SeasonBestRating;
    UpdateField<uint32, 0, 9> PvpTierID;
    UpdateField<uint32, 0, 10> WeeklyBestWinPvpTierID;
    UpdateField<uint32, 0, 11> Field_28;
    UpdateField<uint32, 0, 12> Field_2C;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CharacterRestriction : public IsUpdateFieldStructureTag
{
    int32 Field_0;
    int32 Field_4;
    int32 Field_8;
    uint32 Type;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(CharacterRestriction const& right) const;
    bool operator!=(CharacterRestriction const& right) const { return !(*this == right); }
};

struct SpellPctModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    float ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellPctModByLabel const& right) const;
    bool operator!=(SpellPctModByLabel const& right) const { return !(*this == right); }
};

struct SpellFlatModByLabel : public IsUpdateFieldStructureTag
{
    int32 ModIndex;
    int32 ModifierValue;
    int32 LabelID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(SpellFlatModByLabel const& right) const;
    bool operator!=(SpellFlatModByLabel const& right) const { return !(*this == right); }
};

struct Research : public IsUpdateFieldStructureTag
{
    int16 ResearchProjectID;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    bool operator==(Research const& right) const;
    bool operator!=(Research const& right) const { return !(*this == right); }
};

struct GlyphInfo : public IsUpdateFieldStructureTag, public HasChangesMask<3>
{
    UpdateField<uint32, 0, 1> GlyphSlot;
    UpdateField<uint32, 0, 2> Glyph;

    void WriteCreate(ByteBuffer& data, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ActivePlayerData : public IsUpdateFieldStructureTag, public HasChangesMask<1490>
{
    UpdateField<bool, 0, 1> InsertItemsLeftToRight;
    UpdateFieldArray<DynamicUpdateFieldBase<UF::Research>, 1, 17, 18> Research;
    DynamicUpdateField<uint64, 0, 2> KnownTitles;
    DynamicUpdateField<uint32, 0, 3> ResearchSites;
    DynamicUpdateField<uint32, 0, 4> ResearchSiteProgress;
    DynamicUpdateField<int32, 0, 5> DailyQuestsCompleted;
    DynamicUpdateField<int32, 0, 6> AvailableQuestLineXQuestIDs;
    DynamicUpdateField<int32, 0, 7> Unk254;
    DynamicUpdateField<int32, 0, 8> Heirlooms;
    DynamicUpdateField<uint32, 0, 9> HeirloomFlags;
    DynamicUpdateField<int32, 0, 10> Toys;
    DynamicUpdateField<uint32, 0, 11> Transmog;
    DynamicUpdateField<int32, 0, 12> ConditionalTransmog;
    DynamicUpdateField<int32, 0, 13> SelfResSpells;
    DynamicUpdateField<UF::SpellPctModByLabel, 0, 15> SpellPctModByLabel;
    DynamicUpdateField<UF::SpellFlatModByLabel, 0, 16> SpellFlatModByLabel;
    DynamicUpdateField<UF::CharacterRestriction, 0, 14> CharacterRestrictions;
    UpdateField<ObjectGuid, 0, 19> FarsightObject;
    UpdateField<ObjectGuid, 0, 20> ComboTarget;
    UpdateField<uint64, 0, 21> Coinage;
    UpdateField<int32, 0, 22> XP;
    UpdateField<int32, 0, 23> NextLevelXP;
    UpdateField<int32, 0, 24> TrialXP;
    UpdateField<UF::SkillInfo, 0, 25> Skill;
    UpdateField<int32, 0, 26> CharacterPoints;
    UpdateField<int32, 0, 27> MaxTalentTiers;
    UpdateField<uint32, 0, 28> TrackCreatureMask;
    UpdateField<float, 0, 29> MainhandExpertise;
    UpdateField<float, 0, 30> OffhandExpertise;
    UpdateField<float, 0, 31> RangedExpertise;
    UpdateField<float, 0, 32> CombatRatingExpertise;
    UpdateField<float, 0, 33> BlockPercentage;
    UpdateField<float, 34, 35> DodgePercentage;
    UpdateField<float, 34, 36> DodgePercentageFromAttribute;
    UpdateField<float, 34, 37> ParryPercentage;
    UpdateField<float, 34, 38> ParryPercentageFromAttribute;
    UpdateField<float, 34, 39> CritPercentage;
    UpdateField<float, 34, 40> RangedCritPercentage;
    UpdateField<float, 34, 41> OffhandCritPercentage;
    UpdateField<int32, 34, 42> ShieldBlock;
    UpdateField<float, 34, 43> Mastery;
    UpdateField<float, 34, 44> Speed;
    UpdateField<float, 34, 45> Avoidance;
    UpdateField<float, 34, 46> Sturdiness;
    UpdateField<float, 34, 47> Unk340_3;
    UpdateField<int32, 34, 48> Versatility;
    UpdateField<float, 34, 49> VersatilityBonus;
    UpdateField<float, 34, 50> PvpPowerDamage;
    UpdateField<float, 34, 51> PvpPowerHealing;
    UpdateField<int32, 34, 52> ModHealingDonePos;
    UpdateField<float, 34, 53> ModHealingPercent;
    UpdateField<float, 34, 54> ModHealingDonePercent;
    UpdateField<float, 34, 55> ModPeriodicHealingDonePercent;
    UpdateField<float, 34, 56> ModSpellPowerPercent;
    UpdateField<float, 34, 57> ModResiliencePercent;
    UpdateField<float, 34, 58> OverrideSpellPowerByAPPercent;
    UpdateField<float, 34, 59> OverrideAPBySpellPowerPercent;
    UpdateField<int32, 34, 60> ModTargetResistance;
    UpdateField<int32, 34, 61> ModTargetPhysicalResistance;
    UpdateField<uint32, 34, 62> LocalFlags;
    UpdateField<uint8, 34, 63> GrantableLevels;
    UpdateField<uint8, 34, 64> MultiActionBars;
    UpdateField<uint8, 34, 65> LifetimeMaxRank;
    UpdateField<uint8, 66, 67> NumRespecs;
    UpdateField<int32, 66, 68> AmmoID;
    UpdateField<uint32, 66, 69> PvpMedals;
    UpdateField<uint16, 66, 70> TodayHonorableKills;
    UpdateField<uint16, 66, 71> TodayDishonorableKills;
    UpdateField<uint16, 66, 72> YesterdayHonorableKills;
    UpdateField<uint16, 66, 73> YesterdayDishonorableKills;
    UpdateField<uint16, 66, 74> LastWeekHonorableKills;
    UpdateField<uint16, 66, 75> LastWeekDishonorableKills;
    UpdateField<uint16, 66, 76> ThisWeekHonorableKills;
    UpdateField<uint16, 66, 77> ThisWeekDishonorableKills;
    UpdateField<uint32, 66, 78> ThisWeekContribution;
    UpdateField<uint32, 66, 79> LifetimeHonorableKills;
    UpdateField<uint32, 66, 80> LifetimeDishonorableKills;
    UpdateField<uint32, 66, 81> YesterdayContribution;
    UpdateField<uint32, 66, 82> LastWeekContribution;
    UpdateField<uint32, 66, 83> LastWeekRank;
    UpdateField<int32, 66, 84> WatchedFactionIndex;
    UpdateField<int32, 66, 85> MaxLevel;
    UpdateField<int32, 66, 86> ScalingPlayerLevelDelta;
    UpdateField<int32, 66, 87> MaxCreatureScalingLevel;
    UpdateField<int32, 66, 88> PetSpellPower;
    UpdateField<float, 66, 89> UiHitModifier;
    UpdateField<float, 66, 90> UiSpellHitModifier;
    UpdateField<int32, 66, 91> HomeRealmTimeOffset;
    UpdateField<float, 66, 92> ModPetHaste;
    UpdateField<uint8, 66, 93> LocalRegenFlags;
    UpdateField<uint8, 66, 94> AuraVision;
    UpdateField<uint8, 66, 95> NumBackpackSlots;
    UpdateField<int32, 66, 96> OverrideSpellsID;
    UpdateField<int32, 66, 97> LfgBonusFactionID;
    UpdateField<uint16, 98, 99> LootSpecID;
    UpdateField<uint32, 98, 100> OverrideZonePVPType;
    UpdateField<int32, 98, 101> Honor;
    UpdateField<int32, 98, 102> HonorNextLevel;
    UpdateField<int32, 98, 103> PvpTierMaxFromWins;
    UpdateField<int32, 98, 104> PvpLastWeeksTierMaxFromWins;
    UpdateField<uint8, 98, 105> NumBankSlots;
    UpdateField<int32, 98, 106> TransportServerTime;
    UpdateField<uint8, 98, 107> Unk340_2;
    UpdateFieldArray<ObjectGuid, 129, 108, 109> InvSlots;
    UpdateFieldArray<uint32, 2, 238, 239> TrackResourceMask;
    UpdateFieldArray<float, 7, 241, 242> SpellCritPercentage;
    UpdateFieldArray<int32, 7, 241, 249> ModDamageDonePos;
    UpdateFieldArray<int32, 7, 241, 256> ModDamageDoneNeg;
    UpdateFieldArray<float, 7, 241, 263> ModDamageDonePercent;
    UpdateFieldArray<uint64, 240, 270, 271> ExploredZones;
    UpdateFieldArray<UF::RestInfo, 2, 511, 512> RestInfo;
    UpdateFieldArray<float, 3, 514, 515> WeaponDmgMultipliers;
    UpdateFieldArray<float, 3, 514, 518> WeaponAtkSpeedMultipliers;
    UpdateFieldArray<uint32, 12, 521, 522> BuybackPrice;
    UpdateFieldArray<int64, 12, 521, 534> BuybackTimestamp;
    UpdateFieldArray<int32, 32, 546, 547> CombatRatings;
    UpdateFieldArray<UF::PVPInfo, 6, 579, 580> PvpInfo;
    UpdateFieldArray<uint32, 4, 586, 587> NoReagentCostMask;
    UpdateFieldArray<int32, 2, 591, 592> ProfessionSkillLine;
    UpdateFieldArray<uint32, 4, 594, 595> BagSlotFlags;
    UpdateFieldArray<uint32, 7, 599, 600> BankBagSlotFlags;
    UpdateFieldArray<uint64, 875, 607, 608> QuestCompleted;
    UpdateFieldArray<UF::GlyphInfo, 6, 1483, 1484> GlyphInfos;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Player const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Player const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct GameObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<19>
{
    UpdateField<std::vector<uint32>, 0, 1> StateWorldEffectIDs;
    DynamicUpdateField<int32, 0, 2> EnableDoodadSets;
    UpdateField<int32, 0, 3> DisplayID;
    UpdateField<uint32, 0, 4> SpellVisualID;
    UpdateField<uint32, 0, 5> StateSpellVisualID;
    UpdateField<uint32, 0, 6> SpawnTrackingStateAnimID;
    UpdateField<uint32, 0, 7> SpawnTrackingStateAnimKitID;
    UpdateField<ObjectGuid, 0, 8> CreatedBy;
    UpdateField<ObjectGuid, 0, 9> GuildGUID;
    UpdateField<uint32, 0, 10> Flags;
    struct FlagsTag : ViewerDependentValueTag<uint32> {};
    UpdateField<QuaternionData, 0, 11> ParentRotation;
    UpdateField<int32, 0, 12> FactionTemplate;
    UpdateField<int32, 0, 13> Level;
    UpdateField<int8, 0, 14> State;
    UpdateField<int8, 0, 15> TypeID;
    UpdateField<uint8, 0, 16> PercentHealth;
    UpdateField<uint32, 0, 17> ArtKit;
    UpdateField<uint32, 0, 18> CustomParam;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, GameObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, GameObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct DynamicObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<ObjectGuid, 0, 1> Caster;
    UpdateField<uint8, 0, 2> Type;
    UpdateField<int32, 0, 3> SpellXSpellVisualID;
    UpdateField<int32, 0, 4> SpellID;
    UpdateField<float, 0, 5> Radius;
    UpdateField<uint32, 0, 6> CastTime;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, DynamicObject const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, DynamicObject const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct CorpseData : public IsUpdateFieldStructureTag, public HasChangesMask<32>
{
    DynamicUpdateField<UF::ChrCustomizationChoice, 0, 1> Customizations;
    UpdateField<uint32, 0, 2> DynamicFlags;
    UpdateField<ObjectGuid, 0, 3> Owner;
    UpdateField<ObjectGuid, 0, 4> PartyGUID;
    UpdateField<ObjectGuid, 0, 5> GuildGUID;
    UpdateField<uint32, 0, 6> DisplayID;
    UpdateField<uint8, 0, 7> RaceID;
    UpdateField<uint8, 0, 8> Sex;
    UpdateField<uint8, 0, 9> Class;
    UpdateField<uint32, 0, 10> Flags;
    UpdateField<int32, 0, 11> FactionTemplate;
    UpdateFieldArray<uint32, 19, 12, 13> Items;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Corpse const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Corpse const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ScaleCurve : public IsUpdateFieldStructureTag, public HasChangesMask<7>
{
    UpdateField<bool, 0, 1> OverrideActive;
    UpdateField<uint32, 0, 2> StartTimeOffset;
    UpdateField<uint32, 0, 3> ParameterCurve;
    UpdateFieldArray<TaggedPosition<Position::XY>, 2, 4, 5> Points;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct VisualAnim : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<bool, 0, 1> Field_C;
    UpdateField<uint32, 0, 2> AnimationDataID;
    UpdateField<uint32, 0, 3> AnimKitID;
    UpdateField<uint32, 0, 4> AnimProgress;

    void WriteCreate(ByteBuffer& data, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct AreaTriggerData : public IsUpdateFieldStructureTag, public HasChangesMask<16>
{
    UpdateField<UF::ScaleCurve, 0, 1> OverrideScaleCurve;
    UpdateField<UF::ScaleCurve, 0, 2> ExtraScaleCurve;
    UpdateField<ObjectGuid, 0, 3> Caster;
    UpdateField<uint32, 0, 4> Duration;
    UpdateField<uint32, 0, 5> TimeToTarget;
    UpdateField<uint32, 0, 6> TimeToTargetScale;
    UpdateField<uint32, 0, 7> TimeToTargetExtraScale;
    UpdateField<int32, 0, 8> SpellID;
    UpdateField<int32, 0, 9> SpellForVisuals;
    UpdateField<int32, 0, 10> SpellXSpellVisualID;
    UpdateField<float, 0, 11> BoundsRadius2D;
    UpdateField<uint32, 0, 12> DecalPropertiesID;
    UpdateField<ObjectGuid, 0, 13> CreatingEffectGUID;
    UpdateField<ObjectGuid, 0, 14> Field_80;
    UpdateField<UF::VisualAnim, 0, 15> VisualAnim;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, AreaTrigger const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, AreaTrigger const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct SceneObjectData : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<int32, 0, 1> ScriptPackageID;
    UpdateField<uint32, 0, 2> RndSeedVal;
    UpdateField<ObjectGuid, 0, 3> CreatedBy;
    UpdateField<uint32, 0, 4> SceneType;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Object const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Object const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

struct ConversationLine : public IsUpdateFieldStructureTag
{
    int32 ConversationLineID;
    uint32 StartTime;
    struct StartTimeTag : ViewerDependentValueTag<uint32> {};
    int32 UiCameraID;
    uint8 ActorIndex;
    uint8 Flags;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationLine const& right) const;
    bool operator!=(ConversationLine const& right) const { return !(*this == right); }
};

struct ConversationActor : public IsUpdateFieldStructureTag
{
    uint32 Type;
    int32 Id;
    ObjectGuid ActorGUID;
    uint32 CreatureID;
    uint32 CreatureDisplayInfoID;

    void WriteCreate(ByteBuffer& data, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, bool ignoreChangesMask, Conversation const* owner, Player const* receiver) const;
    bool operator==(ConversationActor const& right) const;
    bool operator!=(ConversationActor const& right) const { return !(*this == right); }
};

struct ConversationData : public IsUpdateFieldStructureTag, public HasChangesMask<5>
{
    UpdateField<std::vector<UF::ConversationLine>, 0, 1> Lines;
    DynamicUpdateField<UF::ConversationActor, 0, 2> Actors;
    UpdateField<int32, 0, 3> LastLineEndTime;
    struct LastLineEndTimeTag : ViewerDependentValueTag<int32> {};
    UpdateField<uint32, 0, 4> Progress;

    void WriteCreate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, EnumFlag<UpdateFieldFlag> fieldVisibilityFlags, Conversation const* owner, Player const* receiver) const;
    void WriteUpdate(ByteBuffer& data, Mask const& changesMask, bool ignoreNestedChangesMask, Conversation const* owner, Player const* receiver) const;
    void ClearChangesMask();
};

}

#endif // UpdateFields_h__
